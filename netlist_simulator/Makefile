TESTDIR := test
HDRDIR := hdr
SRCDIR := src
BINDIR := bin
DOCDIR := doc

TESTFILES := $(wildcard $(TESTDIR)/*.net)
TESTS := $(BINDIR)/graph_test.byte $(BINDIR)/scheduler_test.byte
TESTSCRIPT := $(TESTDIR)/tests.sh

TARGETS := $(TESTS) $(BINDIR)/netlist_simulator.byte
TESTTARGET := graphTest schedulerTest

# COLORS
BLACK   := $(shell tput -Txterm setaf 0)
RED     := $(shell tput -Txterm setaf 1)
GREEN   := $(shell tput -Txterm setaf 2)
YELLOW  := $(shell tput -Txterm setaf 3)
BLUE    := $(shell tput -Txterm setaf 4)
MAGENTA := $(shell tput -Txterm setaf 5)
CYAN    := $(shell tput -Txterm setaf 6)
WHITE   := $(shell tput -Txterm setaf 7)
RESET   := $(shell tput -Txterm sgr0)

TARGET_MAX_CHAR_NUM=20

MLIS := $(wildcard $(HDRDIR)/*.mli)

BUILD := ocamlbuild
BUILDFLAG := -build-dir $(BINDIR)

DOCMKR := ocamldoc
HTMLFLAGS := -html -colorize-code -charset utf-8
DOCFLAGS := $(HTMLFLAGS) -warn-error -verbose

PHONY := help graphTest schedulerTest simulator test doc cleanDoc mrproper bindir


## Show help
help:
	@echo ''
	@echo 'Usage:'
	@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'
	@echo ''
	@echo 'Targets:'
	@awk '/^[a-zA-Z\-_0-9]+:/ { \
		helpMessage = match(lastLine, /^## (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")-1); \
			helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
			printf "  ${YELLOW}%-$(TARGET_MAX_CHAR_NUM)s${RESET} ${GREEN}%s${RESET}\n", helpCommand, helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)
	@echo ''


bindir:
	@mkdir -p $(BINDIR)


## Building everything
all: graphTest schedulerTest simulator doc


## Build the tests for the basic implementation of directed graphs
graphTest: | bindir
	@printf "\n${CYAN}Building graph tests${RESET}\n"
	@$(BUILD) $(BUILDFLAG) $(SRCDIR)/graph_test.byte
	@mv $(BINDIR)/$(SRCDIR)/graph_test.byte $(BINDIR)/.
	@echo ""


## Build the tests for the scheduler
schedulerTest: | bindir
	@printf "\n${CYAN}Building scheduler tests${RESET}\n"
	@$(BUILD) $(BUILDFLAG) $(SRCDIR)/scheduler_test.byte
	@mv $(BINDIR)/$(SRCDIR)/scheduler_test.byte $(BINDIR)/.
	@echo ""


## Build the testers and try them on the different .net files in test/
test: $(TESTTARGET)
	@./$(TESTSCRIPT)


## Build the netlist simulator
simulator: | bindir
	@printf "\n${CYAN}Building simulator${RESET}\n"
	@$(BUILD) $(BUILDFLAG) $(SRCDIR)/netlist_simulator.byte
	@mv $(BINDIR)/$(SRCDIR)/netlist_simulator.byte $(BINDIR)/.
	@echo ""


## Generate the documentation
doc: cleanDoc
	@printf "\n${CYAN}Generating the documentation${RESET}\n"
	$(DOCMKR) $(DOCFLAGS) -I $(BINDIR)/$(SRCDIR) -d $(DOCDIR) $(MLIS)


## Clean the documentation
cleanDoc:
	@printf "\n${CYAN}Cleaning the documentation${RESET}\n\n"
	@rm -rf $(DOCDIR)/*


## Delete .byte files and _sch.net files generated by the tests
clean:
	@printf "\n${CYAN}##### INIT CLEANING #####${RESET}\n\n"
	@printf "${MAGENTA}Deleting .bytes${RESET}\n"
	@rm -rf $(BINDIR)/*
	@printf "${GREEN}Done${RESET}\n\n"
	@printf "${MAGENTA}Deleting _sch.net files${RESET}\n"
	@rm -rf $(TESTDIR)/*_sch.net
	@printf "${GREEN}Done${RESET}\n"
	@printf "\n${CYAN}##### CLEANING DONE #####${RESET}\n\n"

## Cleaning the entire project
mrproper: cleanDoc clean